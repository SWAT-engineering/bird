module network::TCP_IP

import network::TCP
import network::UDP

import network::applications::DNS
import network::IPv4
import network::IPv6

// start of PCAP

struct PCAP {
	GlobalHeader header
	Packet[] packets
	RawProtocolData ipPacket(17) byparsing (packets[0].data)
    //ApplicationData[] applicationPackets = reassembleAndParse2(ipPackets)
}

struct GlobalHeader {
	u32 magicNumber
	u16 versionMajor
	u16 versionMinor
	u32	thisZone 
	u32 sigfigs
	u32 snaplen
	u32 network
}

struct Packet {
	PacketHeader header
	byte[] data[header.inclLen.as[int]]
	
}

struct PacketHeader {
	u32 seconds
	u32 microseconds
	u32 inclLen
	u32 origLen 
}




// actual start of TCP_IP

struct NetworkStream {
    RawIPPacket[] packets
    RawProtocolData[] ipPackets = reassembleAndParse1(packets)
    ApplicationData[] applicationPackets = reassembleAndParse2(ipPackets)
}

choice IPHeader {
    abstract int dataSize
    abstract u8 protocol
    IPv4Header
    IPv6Header
}

struct RawIPPacket@(endianness = BIG) {
   IPHeader head
   u8[] data[head.dataSize]
}

choice RawProtocolData(int protocol) {
    abstract byte[] data
    struct {
        TCPSegment segment ?(protocol == 6)
        byte[] data = segment.data 
    }
    struct {
        UDPSegment segment ?(protocol == 17)
        byte[] data = segment.data 
    }

    UnparsedProtocol
}

struct UnparsedProtocol {
    byte[] data
}


choice ApplicationData {
    DNS
    //HTTP
    //SMT
}

@(engineering.swat.net.Reassembly)
RawProtocolData[] reassembleAndParse3(Packet[] packets)

@(engineering.swat.net.Reassembly)
RawProtocolData[] reassembleAndParse1(RawIPPacket[] packets)

@(engineering.swat.net.Reassembly)
ApplicationData[] reassembleAndParse2(RawProtocolData[] protocol)