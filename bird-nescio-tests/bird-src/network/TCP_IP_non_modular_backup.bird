module network::TCP_IP_non_modular


// start of PCAP

struct PCAP {
	GlobalHeader header
	Packet[] packets
	RawProtocolData ipPacket(17) byparsing (packets[0].data)
    //ApplicationData[] applicationPackets = reassembleAndParse2(ipPackets)
}

struct GlobalHeader {
	u32 magicNumber
	u16 versionMajor
	u16 versionMinor
	u32	thisZone 
	u32 sigfigs
	u32 snaplen
	u32 network
}

struct Packet {
	EthernetHeader header
	IPv4Header ipHeader
	byte[] data[ipHeader.dataSize]
}



struct EthernetHeader {
	u48 destMAC
	u48 srcMAC
	u16 type
}

// start of UDP


struct UDPSegment {
	UDPHeader header
	byte[] data[header.len.as[int]]
}

struct UDPHeader {
	u16 sourcePort
	u16 destinationPort
	u16 len
	u16 checksum
}


// start of DNS

struct DNS {
    DNSHeader header
    Question[] questions[header.questions.as[int]]
    Record[] answers[header.answerRecords.as[int]]
    Record[] authorities[header.authorityRecords.as[int]]
    Record[] additionals[header.additionalRecords.as[int]]
}

struct Question {
    DNSName questionName
    u16 type ?(invalidDNSTypes(this))
    u16 clazz
}

choice EndDNSName {
	struct {
        u8 size ?(== 0B)
        str name = ""S
    }
	
	struct {
        u16 pointer?((this & 0b1100_0000) == 0b1100_0000)
    }

}

choice DNSName {
    //abstract str name
    
    struct {
        u8 size ?(this.as[int] > 0)
        byte[] chars[size.as[int]]
        DNSName next
        //str name = chars.as[str] (+) "."S (+) next.name
    }
    EndDNSName
}


struct DNSHeader {
    u16 identifier
    u16 flags 
        ?( (this & 0b111_0000).as[int] == 0 // it was b111_0000
        && ((this >> 11) & 0b1111).as[int] != 3 
        && (this & 0b1111).as[int] <= 10) // reserved bits and codes
    u16 questions
    u16 answerRecords
    u16 authorityRecords
    u16 additionalRecords
}


struct Record {
	DNSName name
	u16 type  ?(invalidDNSTypes(this))
	u16 clazz
	u32 ttl
	u16 rdLength
	byte[] rdata[rdLength.as[int]]
}


@(yet.to.be.implemented.InvalidDNSTypes)
bool invalidDNSTypes(byte[] bytes)

// start of IPV4

struct IPv4Header {
    u8 versionAndLength ?((this & 0b1111_0000) >> 4 == 4B)
    int headerLength = (versionAndLength & 0b1111).as[int] * 4
    u8 _
    u16 totalPacketLength 
    int dataSize = totalPacketLength.as[int] - headerLength
    u16 identification
    u16 fragmentFlagsAndOffset ?(this >> 15 == 0B)
    u8 ttl
    u8 protocol
    u16 checksum
    u32 srcAddress
    u32 dstAddress
    u8[] options [headerLength - (5 * 4)]
}


// actual start of TCP_IP

struct NetworkStream {
    RawIPPacket[] packets
    RawProtocolData[] ipPackets = reassembleAndParse1(packets)
    ApplicationData[] applicationPackets = reassembleAndParse2(ipPackets)
}

choice IPHeader {
    abstract int dataSize
    abstract u8 protocol
    IPv4Header
    //IPv6Header
}

struct RawIPPacket@(endianness = BIG) {
   IPHeader head
   u8[] data[head.dataSize]
}

choice RawProtocolData(int protocol) {
    abstract byte[] data
    //struct {
    //    TCPSegment _ ?(protocol == 6)
    //}
    struct {
        UDPSegment segment ?(protocol == 17)
        byte[] data = segment.data 
    }

    //UnparsedProtocol
}

//struct UnparsedProtocol {
//    byte[] data
//}


choice ApplicationData {
    DNS
    //HTTP
    //SMT
}

@(engineering.swat.net.Reassembly)
RawProtocolData[] reassembleAndParse3(Packet[] packets)

@(engineering.swat.net.Reassembly)
RawProtocolData[] reassembleAndParse1(RawIPPacket[] packets)

@(engineering.swat.net.Reassembly)
ApplicationData[] reassembleAndParse2(RawProtocolData[] protocol)