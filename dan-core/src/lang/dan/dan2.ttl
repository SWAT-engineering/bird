test D1 [[
    module m
    
    struct Person{
    	int offset = 5
		u8[] bootCode[0x1fd - offset]
	}
]]

test D2 [[
    module m
    
    struct Person{
    	Address address
		u8[] bootCode[0x1fd - address.number]
	}
	
	struct Address{
		int number = 5
	}
]]

test D3 [[
    module m
    
    struct Person{
    	u8[] bootCode[0x1fd - bootCode.offset]
	}
]]

test D4 [[
    module m
    
    struct Person{
    	int foo = 5
    	u8[] bootCode[0x1fd - foo.offset]
	}
]] expect { "Only token types have offsets" }

test D5 [[
    module m
    
    struct Person{
    	struct{
    		int number = 5
    	} address
	}
]]

test D6 [[
    module m
    
    struct Person{
    	struct{
    		int number = 5
    	} address
    	int exposed = address.number
	}
]]

test D7 [[
    module m
    
    struct Person{
    	u8[] grades
    	int firstGrade = grades[0]
	}
]]


test D8 [[
    module m
    
    struct Person{
    	u8[] grades
    	int[] firstGrades = grades[0:2]
	}
]]

test D9 [[
    module m
    
    struct Person{
    	u8[] grades
    	int[] lastGrades = grades[:2]
	}
]]


test D10 [[
    module m
    
    struct Person{
    	u8[] grades
    	int[] gradesFrom = grades[0:]
	}
]]

test D11 [[
module m

choice FileCluster2(u16 myCluster, u32 clusterSize, int clusterStart){
  struct{
  	u16 nextCluster ? (!= 0xFFF8)
  }
  struct{
    u16 nextCluster ? (== 0xFFF8)
  }
}
]]

test D12 [[
module m
    
choice FileCluster2(u16 myCluster, u32 clusterSize, int clusterStart){
  abstract u16 nextCluster
  struct{
  	u16 nextCluster ? (!= 0xFFF8)
  }
  struct{
    u16 nextCluster ? (== 0xFFF8)
  }
}
]]

test D13 [[
module m
    
choice FileCluster2(u16 myCluster, u32 clusterSize, int clusterStart){
  abstract u16 nextCluster
  struct{
  	u16 otherCluster ? (!= 0xFFF8)
  }
  struct{
    u16 nextCluster ? (== 0xFFF8)
  }
}
]] expect { "Missing implementation of abstract field" }

test D14 [[
module m
    
struct AuxStruct{
	u16 nextCluster ? (== 0xFFF8)
}

choice FileCluster2(u16 myCluster, u32 clusterSize, int clusterStart){
  abstract u16 nextCluster
  struct{
  	u16 nextCluster ? (!= 0xFFF8)
  }
  AuxStruct
}
]]

test D15 [[
module m
    
struct AuxStruct{
}

choice FileCluster2(u16 myCluster, u32 clusterSize, int clusterStart){
  abstract u16 nextCluster
  struct{
  	u16 nextCluster ? (!= 0xFFF8)
  }
  AuxStruct
}
]] expect { "Missing implementation of abstract field" }

test D16 [[
module m
    
struct AuxStruct{
	u16 nextCluster ? (== 0xFFF8)
	FileCluster2 other(nextCluster, nextCluster, 0)
	u16 otherCluster = other.nextCluster
}

choice FileCluster2(u16 myCluster, u32 clusterSize, int clusterStart){
  abstract u16 nextCluster
  struct{
  	u16 nextCluster ? (!= 0xFFF8)
  }
  AuxStruct
}
]]

test D17 [[
module m
    
struct BPB20{
	u8 logicalSectorsPerFat
	u8 bytesPerLogicalSector
	u8 fatCount
	u8 maxRootDirectoryEntryCount
}

struct FAT(BPB20 bootSector){
  u8[] table[bootSector.logicalSectorsPerFat * bootSector.bytesPerLogicalSector]   // might need to skip
}
]]

test D18 [[
module m
    
struct DirectoryEntry{
  u8[] _[2] // ignored fields
  u16[] _[6] // another way of ignoring fields
}
]]

test D19[[
module m
    
struct FORMAT_ZIP@(encoding = LittleIndian){
	struct{
	} _	
}
]]

test D20[[
module m
    
struct A{
	B b(1,2)
}

struct B(int x, int y){
}
]]
