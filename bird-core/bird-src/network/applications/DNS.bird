module network::applications::DNS

struct DNS {
    DNSHeader header
    Question[] questions[header.questions.as[int]]
    Record[] answers[header.answerRecords.as[int]]
    Record[] authorities[header.authorityRecords.as[int]]
    Record[] additionals[header.additionalRecords.as[int]]
}

struct Question {
    DNSName questionName
    u16 type ?(invalidDNSTypes(this))
    u16 class
}

choice EndDNSName {
	struct {
        u8 size ?(== 0B)
        str name = ""S
    }
	
	struct {
        u16 pointer?((this & 0b1100_0000) == 0b1100_0000)
    }

}

choice DNSName {
    //abstract str name
    
    struct {
        u8 size ?(this.as[int] > 0)
        byte[] chars[size.as[int]]
        DNSName next
        //str name = chars.as[str] (+) "."S (+) next.name
    }
    EndDNSName
}


struct DNSHeader {
    u16 identifier
    u16 flags 
        ?( (this & 0b111_0000).as[int] == 0 // it was b111_0000
        && ((this >> 11) & 0b1111).as[int] != 3 
        && (this & 0b1111).as[int] <= 10) // reserved bits and codes
    u16 questions
    u16 answerRecords
    u16 authorityRecords
    u16 additionalRecords
}


struct Record {
	DNSName name
	u16 type  ?(invalidDNSTypes(this))
	u16 class
	u32 ttl
	u16 rdLength
	byte[] rdata[rdLength.as[int]]
}


@(yet.to.be.implemented.InvalidDNSTypes)
bool invalidDNSTypes(byte[] bytes)